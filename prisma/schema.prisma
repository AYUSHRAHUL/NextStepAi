generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bio             String?
  experience      Int?
  skills          String[]
  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
  roadmaps        Roadmap[]
}

model Assessment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Resume {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   String   // Markdown content
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model IndustryInsight {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  industry          String   @unique
  users             User[]
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       String
  topSkills         String[]
  marketOutlook     String
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime @default(now())
  nextUpdate        DateTime
}

model Roadmap {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])

  title          String
  targetRole     String
  targetIndustry String?
  content        String?   // summary/description

  // Weeks/steps array as JSON to keep flexible shape returned by AI
  steps          Json[]

  // Extra detail sections - now structured objects
  certifications Json[]   // Array of certification objects
  projects       Json[]   // Array of project objects
  networking     Json[]   // Array of networking objects
  recommendedSkills Json[] // Array of skill objects

  // 3D block metadata to support fancy UI (position/size/depth/colors)
  blocks3d       Json[]

  // Connection data for React Flow
  connections    Json[]   // Array of connection objects

  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

